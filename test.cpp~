#include"incfile.cpp"
#include"shell_runner.h"
#include<iostream>
using std::cin;
using std::cout;
using std::endl;
regex command(R"(^((?:".+")|(?:[^"][^ ]+[^"])|(?:[\w^ ]+))(.*)$)");
int main(){
  while(true){
    string cmd;
    cin>>cmd;
    if(cmd=="exit"){
      break;
    }
    cmatch cm;
    if(regex_match(cmd.c_str(),cm,command)){
      char *args[100];
      int argid=1;
      memset(args,0,sizeof args);
      args[0]=new char [string(cm[1]).size()+1];
      memcpy(args[0],string(cm[1]).c_str(),string(cm[1]).size());
      args[0][string(cm[1]).size()]=0;
      int pos=0;
      char str[100]{0};
      memcpy(str,string(cm[2]).c_str(),string(cm[2]).size());
      cout<<">>"<<string(cm[1]).c_str()<<endl;
      cout<<">>"<<string(cm[2]).c_str()<<endl;
      str[string(cm[2]).size()]=' ';
      int len=strlen(str);
      for(int i=0;i<len;++i){
	if(str[i]==' '){
	  int lenn=i-pos+1;
	  args[argid]=new char[lenn+1];
	  memset(args[argid],0,lenn+1);//+1 to end the str with '\0'
	  for(int j=pos;j<=i;++j){
	    args[argid][j-pos]=str[j];
	  }
	  pos=i+1;
	  ++argid;
	}
      }

      for(int i=0;i<argid;++i){
	cout<<i<<' '<<args[i]<<endl;;
      }
      int input[2],output[2];
      pid_t pid=start(cmd.c_str(),args,input,output);
      string msg;
      char buf[100];
      mutex mtx;
      atomic<bool> exit;
      exit=0;
      thread th_read([&](){
	while(!exit){
	memset(buf,0,sizeof buf);
	read(input[0],buf,100);
	unique_lock<mutex> lck(mtx);
	cout<<"output>"<<buf<<endl;
	sleep(1);
	}
      });
      while(true){
	if(string(msg)=="exit"){
	  break;
	}
	unique_lock<mutex> lck(mtx);
	cout<<"input>";
	lck.unlock();
	msg="";
	cin>>msg;
	write(output[1],msg.c_str(),msg.size());
      }
      exit=true;
      th_read.join();
      cout<<"receive "<<(long long)stop(pid)<<endl;
      

      for(int i=0;i<100;++i){
	if(args[i]){
	  delete[] args[i];
	}
      }
      
    }else{
      cout<<"can't match regex"<<endl;
    }
    
  }
}
